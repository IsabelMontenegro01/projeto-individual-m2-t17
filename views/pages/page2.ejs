<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="/styles/page2Style.css">
</head>
<body>
  <header>
    <h1>Taskly - Gerenciar Tarefas</h1>
    <nav>
      <a href="/">Dashboard</a>
      <a href="/manage">Gerenciar Tarefas</a>
    </nav>
  </header>
  <main>
    <div class="container">
      <h2>Criar Nova Tarefa</h2>
      <form id="taskForm">
        <div>
          <label for="title">T칤tulo:</label>
          <input type="text" id="title" name="title" required>
        </div>

        <div>
          <label for="description">Descri칞칚o:</label>
          <textarea id="description" name="description" rows="4"></textarea>
        </div>

        <div>
          <label for="user_id">Usu치rio:</label>
          <select id="user_id" name="user_id" required>
            <option value="">Selecione um usu치rio</option>
            <% users.forEach(user => { %>
              <option value="<%= user.id %>"><%= user.name %></option>
            <% }); %>
          </select>
          <button type="button" onclick="atualizarUsuarios()">游댃</button>
        </div>

        <div>
          <label for="category_id">Categoria:</label>
          <select id="category_id" name="category_id" required>
            <option value="">Selecione uma categoria</option>
            <% categories.forEach(category => { %>
              <option value="<%= category.id %>"><%= category.name %></option>
            <% }); %>
          </select>
          <button type="button" onclick="atualizarCategorias()">游댃</button>
        </div>

        <div>
          <label for="status">Status:</label>
          <select id="status" name="status" required>
            <option value="pendente">Pendente</option>
            <option value="em andamento">Em andamento</option>
            <option value="conclu칤da">Conclu칤da</option>
          </select>
        </div>

        <div>
          <label for="due_date">Data de Vencimento:</label>
          <input type="date" id="due_date" name="due_date">
        </div>

        <button type="button" onclick="criarTarefa()">Criar Tarefa</button>
        <button type="button" onclick="limparFormulario()">Limpar</button>
      </form>

      <!-- Se칞칚o para criar usu치rio rapidamente -->
      <div style="margin-top: 30px; padding: 20px; border: 1px solid #ccc;">
        <h3>Criar Usu치rio R치pido</h3>
        <input type="text" id="userName" placeholder="Nome do usu치rio" required>
        <input type="email" id="userEmail" placeholder="Email do usu치rio" required>
        <button type="button" onclick="criarUsuario()">Criar Usu치rio</button>
      </div>

      <!-- Se칞칚o para criar categoria rapidamente -->
      <div style="margin-top: 20px; padding: 20px; border: 1px solid #ccc;">
        <h3>Criar Categoria R치pida</h3>
        <input type="text" id="categoryName" placeholder="Nome da categoria" required>
        <input type="text" id="categoryDescription" placeholder="Descri칞칚o da categoria">
        <button type="button" onclick="criarCategoria()">Criar Categoria</button>
      </div>
    </div>
  </main>

  <footer>
    <p>&copy; 2025 Taskly. Todos os direitos reservados.</p>
  </footer>

  <script>
    // Fun칞칚o original melhorada para criar tarefa
    async function criarTarefa() {
      const data = {
        title: document.getElementById("title").value,
        description: document.getElementById("description").value,
        user_id: document.getElementById("user_id").value,
        category_id: document.getElementById("category_id").value,
        status: document.getElementById("status").value,
        due_date: document.getElementById("due_date").value
      };

      // Valida칞칚o simples
      if (!data.title || !data.user_id || !data.category_id) {
        alert("Por favor, preencha todos os campos obrigat칩rios!");
        return;
      }

      try {
        const response = await fetch("/api/tasks", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data),
        });

        if (response.ok) {
          alert("Tarefa criada com sucesso!");
          limparFormulario();
        } else {
          const error = await response.json();
          alert("Erro ao criar tarefa: " + (error.message || "Erro desconhecido"));
        }
      } catch (err) {
        alert("Erro de conex칚o: " + err.message);
      }
    }

    // Fun칞칚o para criar usu치rio
    async function criarUsuario() {
      const name = document.getElementById("userName").value;
      const email = document.getElementById("userEmail").value;

      if (!name || !email) {
        alert("Por favor, preencha nome e email!");
        return;
      }

      try {
        const response = await fetch("/api/users", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name, email })
        });

        if (response.ok) {
          alert("Usu치rio criado com sucesso!");
          document.getElementById("userName").value = "";
          document.getElementById("userEmail").value = "";
          atualizarUsuarios();
        } else {
          const error = await response.json();
          alert("Erro ao criar usu치rio: " + (error.message || "Erro desconhecido"));
        }
      } catch (err) {
        alert("Erro de conex칚o: " + err.message);
      }
    }

    // Fun칞칚o para criar categoria
    async function criarCategoria() {
      const name = document.getElementById("categoryName").value;
      const description = document.getElementById("categoryDescription").value;

      if (!name) {
        alert("Por favor, preencha o nome da categoria!");
        return;
      }

      try {
        const response = await fetch("/api/categories", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name, description })
        });

        if (response.ok) {
          alert("Categoria criada com sucesso!");
          document.getElementById("categoryName").value = "";
          document.getElementById("categoryDescription").value = "";
          atualizarCategorias();
        } else {
          const error = await response.json();
          alert("Erro ao criar categoria: " + (error.message || "Erro desconhecido"));
        }
      } catch (err) {
        alert("Erro de conex칚o: " + err.message);
      }
    }

    // Fun칞칚o para atualizar lista de usu치rios
    async function atualizarUsuarios() {
      try {
        const response = await fetch("/api/users");
        const users = await response.json();
        
        const select = document.getElementById("user_id");
        select.innerHTML = '<option value="">Selecione um usu치rio</option>';
        
        users.forEach(user => {
          const option = document.createElement("option");
          option.value = user.id;
          option.textContent = user.name;
          select.appendChild(option);
        });
        
        console.log("Lista de usu치rios atualizada!");
      } catch (err) {
        console.error("Erro ao atualizar usu치rios:", err);
      }
    }

    // Fun칞칚o para atualizar lista de categorias
    async function atualizarCategorias() {
      try {
        const response = await fetch("/api/categories");
        const categories = await response.json();
        
        const select = document.getElementById("category_id");
        select.innerHTML = '<option value="">Selecione uma categoria</option>';
        
        categories.forEach(category => {
          const option = document.createElement("option");
          option.value = category.id;
          option.textContent = category.name;
          select.appendChild(option);
        });
        
        console.log("Lista de categorias atualizada!");
      } catch (err) {
        console.error("Erro ao atualizar categorias:", err);
      }
    }

    // Fun칞칚o para limpar formul치rio
    function limparFormulario() {
      document.getElementById("taskForm").reset();
    }
  </script>

</body>
</html>