<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/styles/page1Style.css">
</head>
<body>
    <header>
        <h1>Taskly - Dashboard</h1>
        <nav>
            <a href="/">Dashboard</a>
            <a href="/manage">Gerenciar Tarefas</a>
        </nav>
    </header>

    <main>
        <section>
            <h2>Resumo do Sistema</h2>
            <div>
                <p id="total-tasks">Total de Tarefas: <%= tasks.length %></p>
                <p id="total-users">Total de Usu√°rios: <%= users.length %></p>
                <p id="total-categories">Total de Categorias: <%= categories.length %></p>
            </div>
            <button onclick="atualizarEstatisticas()">üîÑ Atualizar</button>
        </section>

        <section>
            <h2>Lista de Tarefas</h2>
            <% if (tasks.length > 0) { %>
                <table border="1">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>T√≠tulo</th>
                            <th>Descri√ß√£o</th>
                            <th>Status</th>
                            <th>Usu√°rio</th>
                            <th>Categoria</th>
                            <th>Data de Vencimento</th>
                            <th>A√ß√µes</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% tasks.forEach(task => { %>
                        <tr>
                            <td><%= task.id %></td>
                            <td><%= task.title %></td>
                            <td><%= task.description %></td>
                            <td>
                                <select onchange="atualizarStatusTarefa('<%= task.id %>', this.value)">
                                    <option value="pendente" <%= task.status === 'pendente' ? 'selected' : '' %>>Pendente</option>
                                    <option value="em andamento" <%= task.status === 'em andamento' ? 'selected' : '' %>>Em andamento</option>
                                    <option value="conclu√≠da" <%= task.status === 'conclu√≠da' ? 'selected' : '' %>>Conclu√≠da</option>
                                </select>
                            </td>
                            <td><%= task.user_name || 'N√£o definido' %></td>
                            <td><%= task.category_name || 'Sem categoria' %></td>
                            <td><%= task.due_date ? new Date(task.due_date).toLocaleDateString('pt-BR') : 'N√£o definida' %></td>
                            <td>
                                <button onclick="excluirTarefa('<%= task.id %>')" style="background-color: #dc3545; color: white; border: none; padding: 5px 10px; cursor: pointer;">
                                    üóëÔ∏è Excluir
                                </button>
                            </td>
                        </tr>
                        <% }); %>
                    </tbody>
                </table>
            <% } else { %>
                <p>Nenhuma tarefa encontrada.</p>
            <% } %>
        </section>

        <section>
            <h2>Usu√°rios Cadastrados</h2>
            <% if (users.length > 0) { %>
                <ul>
                    <% users.forEach(user => { %>
                    <li><%= user.name %> - <%= user.email %></li>
                    <% }); %>
                </ul>
            <% } else { %>
                <p>Nenhum usu√°rio cadastrado.</p>
            <% } %>
        </section>

        <section>
            <h2>Categorias Dispon√≠veis</h2>
            <% if (categories.length > 0) { %>
                <ul>
                    <% categories.forEach(category => { %>
                    <li><strong><%= category.name %></strong> - <%= category.description %></li>
                    <% }); %>
                </ul>
            <% } else { %>
                <p>Nenhuma categoria cadastrada.</p>
            <% } %>
        </section>

        <% if (typeof error !== 'undefined') { %>
            <div style="color: red;">
                <p>Erro: <%= error %></p>
            </div>
        <% } %>
    </main>

    <footer>
        <p>Taskly - Sistema de Gerenciamento de Tarefas</p>
    </footer>

    <script>
        // Fun√ß√£o para atualizar status de uma tarefa
        async function atualizarStatusTarefa(taskId, novoStatus) {
            try {
                const response = await fetch(`/api/tasks/${taskId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status: novoStatus })
                });

                if (response.ok) {
                    alert('Status atualizado com sucesso!');
                    location.reload();
                } else {
                    const error = await response.json();
                    alert('Erro ao atualizar status: ' + (error.message || 'Erro desconhecido'));
                }
            } catch (err) {
                alert('Erro de conex√£o: ' + err.message);
            }
        }

        // Fun√ß√£o para excluir uma tarefa
        async function excluirTarefa(taskId) {
            if (!confirm('Tem certeza que deseja excluir esta tarefa?')) {
                return;
            }

            try {
                const response = await fetch(`/api/tasks/${taskId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    alert('Tarefa exclu√≠da com sucesso!');
                    location.reload();
                } else {
                    const error = await response.json();
                    alert('Erro ao excluir tarefa: ' + (error.message || 'Erro desconhecido'));
                }
            } catch (err) {
                alert('Erro de conex√£o: ' + err.message);
            }
        }

        // Fun√ß√£o para carregar estat√≠sticas atualizadas
        async function atualizarEstatisticas() {
            try {
                const [tasksResponse, usersResponse, categoriesResponse] = await Promise.all([
                    fetch('/api/tasks'),
                    fetch('/api/users'),
                    fetch('/api/categories')
                ]);

                const tasks = await tasksResponse.json();
                const users = await usersResponse.json();
                const categories = await categoriesResponse.json();

                // Atualizar os n√∫meros na p√°gina usando IDs espec√≠ficos
                document.getElementById('total-tasks').textContent = `Total de Tarefas: ${tasks.length}`;
                document.getElementById('total-users').textContent = `Total de Usu√°rios: ${users.length}`;
                document.getElementById('total-categories').textContent = `Total de Categorias: ${categories.length}`;

                alert('Estat√≠sticas atualizadas!');
            } catch (err) {
                alert('Erro ao atualizar estat√≠sticas: ' + err.message);
            }
        }

        // Atualizar estat√≠sticas a cada 30 segundos (opcional - remova se n√£o quiser)
        // setInterval(atualizarEstatisticas, 30000);
    </script>
</body>
</html>